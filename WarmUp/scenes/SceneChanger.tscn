[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer

# current level
export (String, \"intro\", \"introduction\", \"walls\", \"floating_platforms\", \"sensors\", \"oldlab\") var level; 

const DEFAULT_LEVEL = \"res://scenes/Levels/Introduction.tscn\";

var levels = {
	\"intro\" : \"res://scenes/Levels/Intro.tscn\",
	\"introduction\" : \"res://scenes/Levels/Introduction.tscn\",
	\"walls\" : \"res://scenes/Levels/Walls.tscn\",
	\"floating_platforms\" : \"res://scenes/Levels/FloatingPlatforms.tscn\",
	\"sensors\" : \"res://scenes/Levels/Sensors.tscn\",
	\"oldlab\" : \"res://scenes/Levels/Oldlab.tscn\",
	}
	
var menus = {
	\"title\" : \"res://scenes/Menu/TitleScreen.tscn\",
	\"option\" : \"res://scenes/Menu/OptionScreen.tscn\",
	\"gameover\" : \"res://scenes/Menu/GameOver.tscn\",
	\"endgame\" : \"res://scenes/Menu/EndGame.tscn\"
}

signal scene_loading(target);
#signal scene_changed(target);

var current_level = null;

onready var animation_player = $AnimationPlayer
onready var black = $Control/Black

# delay an animation controller

func apply_delay(delay):
	if delay > 0:
		yield(get_tree().create_timer(delay), \"timeout\")
		
func fade_out():
	animation_player.play(\"fade\");
	yield(animation_player, \"animation_finished\")
	
func ease_in():
	animation_player.play_backwards(\"fade\");
	yield(animation_player, \"animation_finished\")
	
# level controller

func detect_current_level():
	var scene = get_tree().get_current_scene().filename;
	# auto-detect current level
	for name in levels.keys():
		if scene == levels[name]:
			level = name;
			current_level = get_tree().get_current_scene();
	assert(level != null, \"Error: no scene was found to be reloaded\")

func reload_scene(delay = 0.5, animate = true):
	change_scene(level, -1, delay, animate);
	
# Equivalent to get_tree().change_scene
# but it emits a signal before the scene is loaded
func goto_scene(path):
	# Load the new scene.
	var s = ResourceLoader.load(path, \"PackedScene\");
	if s == null:
		return ERR_CANT_OPEN;
	elif !s.can_instance():
		return ERR_CANT_CREATE;
	
	# free previous scene
	call_deferred(\"_call_deferred_goto_scene\", s);
	return OK;
	
func _call_deferred_goto_scene(scenepack):	
	# free old scene
	var old = get_tree().current_scene;
	old.free();
	# instance new scene
	var new_scene = scenepack.instance();
	current_level = new_scene;
	emit_signal(\"scene_loading\", new_scene);
	new_scene.connect(\"tree_entered\", get_tree(), \"set_current_scene\", [new_scene], CONNECT_ONESHOT);
	get_tree().get_root().add_child(new_scene);
	#emit_signal(\"scene_changed\", new_scene);
	return OK;
	
func set_check_point(checkpoint):
	if checkpoint >= 0:
		yield(self, \"scene_loading\");
		current_level.checkpoint = checkpoint;

func change_scene(target, checkpoint = -1, delay = 0.5, animate = true):
	
	apply_delay(delay);
	
	if animate:
		fade_out();
	
	var path = levels.get(target, DEFAULT_LEVEL);
	var isok = goto_scene(path);
	assert(isok == OK);
	
	set_check_point(checkpoint);
	
	if animate:
		ease_in();

	level = target;
	
# menus controller

var menu = null;
var ingame_menu : bool = false;
signal menu_opened(which, ingame);

func open_menu(target, ingame = true, delay = 0.0):
	assert(target != null);
			
	if ingame:
		# TODO, add_child to main scene
		pass
	else:
		apply_delay(delay);
		fade_out();
		var path = menus[target];
		var isok = get_tree().change_scene(path);
		assert(isok == OK);
			
		ease_in();
		emit_signal(\"menu_opened\", target, ingame)
	menu = target;
	ingame_menu = ingame;
	
func close_menu(delay = 0.0, scenename = null):
	if menu != null:
		if ingame_menu:
			# TODO, remove child from main scene
			pass
		else:
			if scenename == null:
				reload_scene(delay, ingame_menu);
			else:
				change_scene(scenename);
	menu = null;
"

[sub_resource type="Animation" id=2]
length = 0.8
tracks/0/type = "value"
tracks/0/path = NodePath("Control/Black:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.1, 0.7 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[node name="SceneChanger" type="CanvasLayer"]
script = SubResource( 1 )
level = "introduction"

[node name="Control" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Black" type="ColorRect" parent="Control"]
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 3961.0
margin_bottom = 2588.0
mouse_filter = 2
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/fade = SubResource( 2 )
